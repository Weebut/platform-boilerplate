name: Lightsail CMS Deploy

on:
  push:
    branches:
      - bug/cms
      - main
    paths:
      - '.github/workflows/strapi.yaml'
      - 'strapi/**'
      - '!strapi/docker-compose.dev.yaml'
      - '!strapi/Dockerfile.dev'
      - '!strapi/README.md'
      - '!.eslint**'
    tags-ignore:
      - v1.0_admin_*

jobs:
  deploy-ready:
    name: deployment-ready
    runs-on: ubuntu-latest
    outputs:
      nginx: ${{ steps.filter.outputs.nginx }}
      strapi-superadmin: ${{ steps.filter.outputs.strapi-superadmin }}
      strapi-manager: ${{ steps.filter.outputs.strapi-manager }}
      services: ${{ steps.slack-message-creator.outputs.services }}
      branch: ${{ steps.extract_branch.outputs.branch }}
      stage: ${{ steps.stage.outputs.stage }}
      slack-message: ${{ steps.slack-message-creator.outputs.slack-message }}
      ts: ${{ steps.slack.outputs.ts }}
    steps:
      - uses: actions/checkout@v3
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Extract stage
        id: stage
        shell: bash
        run: |
          if [ "${{steps.extract_branch.outputs.branch}}" == "bug/cms" ]; then echo "::set-output name=stage::dev"; else echo "::set-output name=stage::production"; fi
      - name: filter services
        uses: dorny/paths-filter@v2
        id: filter
        with:
          base: ${{steps.extract_branch.outputs.branch}}
          filters: |
            strapi-superadmin:
              - 'strapi/**'
              - '!strapi/docker-compose.dev.yaml'
              - '!strapi/Dockerfile.dev'
              - '!strapi/nginx'
              - '.github/workflows/strapi.yaml'
            strapi-manager:
              - 'strapi/**'
              - '!strapi/docker-compose.dev.yaml'
              - '!strapi/Dockerfile.dev'
              - '!strapi/nginx'
              - '.github/workflows/strapi.yaml'
            nginx:
              - "strapi/nginx/**"
              - "strapi/docker-compose.yaml"
              - '.github/workflows/strapi.yaml'
      - name: Prepare Slack Message
        id: slack-message-creator
        shell: bash
        run: |
          SLACK_MESSAGE=""

          SOURCE_FLAGS=("${{ steps.filter.outputs.nginx }}" "${{ steps.filter.outputs.strapi-superadmin }}" "${{ steps.filter.outputs.strapi-manager }}")
          SOURCES=("nginx-strapi" "strapi-superadmin" "strapi-manager")
          UPDATED_SOURCES=""
          for i in "${!SOURCE_FLAGS[@]}"; do
            echo ${SOURCE_FLAGS[i]}
            if [[ "${SOURCE_FLAGS[i]}" == "true" ]]; then
              echo "true"
              SLACK_MESSAGE+=" - ${SOURCES[i]}\n"
              UPDATED_SOURCES+="${SOURCES[i]} "
            else
              echo "false"
            fi
          done
          echo "::set-output name=slack-message::${SLACK_MESSAGE}"
          echo "::set-output name=services::${UPDATED_SOURCES}"
      - name: Send GitHub Action trigger data to Slack workflow
        id: slack
        uses: slackapi/slack-github-action@v1.21.0
        with:
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": "CMS 배포가 시작되었습니다. 약 10분 정도가 소요됩니다",
              "attachments": [
                {
                  "pretext": "Deployment of <${{github.SERVER_URL}}/${{github.REPOSITORY}}/actions/runs/${{github.RUN_ID}}|${{steps.stage.outputs.stage}}> stage started by <https://github.com/${{github.ACTOR}}|${{github.ACTOR}}>",
                  "fields": [
                    {
                      "title": "Services",
                      "short": true,
                      "value": "${{steps.slack-message-creator.outputs.slack-message}}"
                    },
                    {
                      "title": "Status",
                      "short": true,
                      "value": "In Progress"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  prepare-dotenv:
    name: prepare dotenv file
    runs-on: ubuntu-latest
    needs: deploy-ready
    environment: ${{needs.deploy-ready.outputs.stage}}
    if: ${{ (needs.deploy-ready.outputs.strapi-superadmin == 'true')|| (needs.deploy-ready.outputs.nginx == 'true') }}
    outputs:
      time: ${{steps.time.outputs.time}}
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        if: ${{ success() }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - name: Get Time
        if: ${{ success() }}
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          timeZone: 9
          format: 'YYYY-MM-DD-HH-mm-ss'
      - name: Create dotenv .env
        shell: bash
        working-directory: ./strapi
        env:
          DATABASE_HOST: ${{ secrets.MYSQL_DATABASE }}
          DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          APP_KEYS: ${{ secrets.APP_KEYS }}
          API_TOKEN_SALT: ${{ secrets.API_TOKEN_SALT }}
          ADMIN_JWT_SECRET: ${{ secrets.ADMIN_JWT_SECRET }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          NGINX_VERSION: ${{ secrets.NGINX_VERSION }}
          NODE_VERSION: ${{ secrets.NODE_VERSION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          STRAPI_S3_BUCKET: ${{ secrets.STRAPI_S3_BUCKET }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_STRAPI_NGINX_REPOSITORY: ${{ secrets.ECR_STRAPI_NGINX_REPOSITORY }}
          ECR_STRAPI_APP_REPOSITORY: ${{ secrets.ECR_STRAPI_APP_REPOSITORY }}
          ECR_STRAPI_ADMIN_REPOSITORY: ${{ secrets.ECR_STRAPI_ADMIN_REPOSITORY }}
          STRAPI_MANAGER_DOMAIN: ${{ secrets.STRAPI_MANAGER_DOMAIN }}
          STRAPI_SUPERADMIN_DOMAIN: ${{ secrets.STRAPI_SUPERADMIN_DOMAIN }}
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          ENV: ${{needs.deploy-ready.outputs.stage}}
          REPO: ${{github.REPOSITORY}}
          BRANCH: ${{needs.deploy-ready.outputs.branch}}
          GH_APP_ID: ${{secrets.GH_APP_ID}}
          GH_APP_SECRET_KEY: ${{secrets.GH_APP_SECRET_KEY}}
          GH_APP_CLIENT_ID: ${{secrets.GH_APP_CLIENT_ID}}
          GH_APP_CLIENT_SECRET: ${{secrets.GH_APP_CLIENT_SECRET}}
          GH_APP_INSTALLATION_ID: ${{secrets.GH_APP_INSTALLATION_ID}}
          GH_STRAPI_WORKFLOW_ID: ${{secrets.GH_STRAPI_WORKFLOW_ID}}
        run: |
          echo "DATABASE_HOST=$DATABASE_HOST" >> .env
          echo "DATABASE_USERNAME=$DATABASE_USERNAME" >> .env
          echo "DATABASE_PASSWORD=$DATABASE_PASSWORD" >> .env
          echo "APP_KEYS=$APP_KEYS" >> .env
          echo "API_TOKEN_SALT=$API_TOKEN_SALT" >> .env
          echo "ADMIN_JWT_SECRET=$ADMIN_JWT_SECRET" >> .env
          echo "JWT_SECRET=$JWT_SECRET" >> .env
          echo "NGINX_VERSION=$NGINX_VERSION" >> .env
          echo "NODE_VERSION=$NODE_VERSION" >> .env
          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> .env
          echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> .env
          echo "AWS_REGION=$AWS_REGION" >> .env
          echo "STRAPI_S3_BUCKET=$STRAPI_S3_BUCKET" >> .env
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> .env
          echo "ECR_STRAPI_NGINX_REPOSITORY=$ECR_STRAPI_NGINX_REPOSITORY" >> .env
          echo "ECR_STRAPI_ADMIN_REPOSITORY=$ECR_STRAPI_ADMIN_REPOSITORY" >> .env
          echo "ECR_STRAPI_APP_REPOSITORY=$ECR_STRAPI_APP_REPOSITORY" >> .env
          echo "ENV=$ENV" >> .env
          cat > ../terraform/vars/${{needs.deploy-ready.outputs.stage}}.tfvars <<EOL
          environment = "${{needs.deploy-ready.outputs.stage}}"
          container_deployments = [
            {
              name = "cms"
              containers = [
                {
                  name = "strapi-superadmin"
                  image = "$ECR_REGISTRY/$ECR_STRAPI_ADMIN_REPOSITORY:$NODE_VERSION-$ENV-${{steps.time.outputs.time}}"
                  command = []
                  environment = {
                    APP_KEYS = "$APP_KEYS"
                    API_TOKEN_SALT = "$API_TOKEN_SALT"
                    ADMIN_JWT_SECRET = "$ADMIN_JWT_SECRET"
                    JWT_SECRET = "$JWT_SECRET"
                    DATABASE_USERNAME = "$DATABASE_USERNAME"
                    DATABASE_PASSWORD = "$DATABASE_PASSWORD"
                    AWS_ACCESS_KEY_ID = "$AWS_ACCESS_KEY_ID"
                    AWS_SECRET_ACCESS_KEY = "$AWS_SECRET_ACCESS_KEY"
                    AWS_REGION = "$AWS_REGION"
                    STRAPI_S3_BUCKET = "$STRAPI_S3_BUCKET"
                    ENV = "$ENV"
                    REPO = "$REPO"
                    BRANCH = "$BRANCH"
                    DATABASE_HOST = "$DATABASE_HOST"
                    GH_APP_ID = "$GH_APP_ID"
                    GH_APP_SECRET_KEY = "$GH_APP_SECRET_KEY"
                    GH_APP_CLIENT_ID = "$GH_APP_CLIENT_ID"
                    GH_APP_CLIENT_SECRET = "$GH_APP_CLIENT_SECRET"
                    GH_APP_INSTALLATION_ID = "$GH_APP_INSTALLATION_ID"
                    GH_STRAPI_WORKFLOW_ID = "$GH_STRAPI_WORKFLOW_ID"
                    DOMAIN = "https://$STRAPI_SUPERADMIN_DOMAIN"
                  }
                  ports = {
                    "1337" = "HTTP"
                  }
                  endpoint_port = -1
                  health_check = {
                    healthy_threshold = -1
                    unhealthy_threshold = -1
                    timeout_seconds = -1
                    interval_seconds = -1
                    path  = "/health"
                    success_codes = "200"
                  }
                  is_public = false
                },
                {
                  name = "nginx"
                  image = "$ECR_REGISTRY/$ECR_STRAPI_NGINX_REPOSITORY:$NGINX_VERSION-$ENV-${{steps.time.outputs.time}}"
                  command = []
                  environment = {
                    STRAPI_MANAGER_HOST = "localhost"
                    STRAPI_MANAGER_DOMAIN = "$STRAPI_MANAGER_DOMAIN"
                    STRAPI_SUPERADMIN_HOST = "localhost"
                    STRAPI_SUPERADMIN_DOMAIN = "$STRAPI_SUPERADMIN_DOMAIN"
                    STRAPI_SUPERADMIN_HOSTING_PORT = "80"
                    STRAPI_MANAGER_HOSTING_PORT = "80"
                  }
                  ports = {
                    "80" = "HTTP"
                  }
                  endpoint_port = 80
                  health_check = {
                    healthy_threshold = 2
                    unhealthy_threshold = 5
                    timeout_seconds = 10
                    interval_seconds = 15
                    path  = "/health"
                    success_codes = "200"
                  }
                  is_public = true
                },
                {
                  name = "strapi-manager"
                  image = "$ECR_REGISTRY/$ECR_STRAPI_APP_REPOSITORY:$NODE_VERSION-$ENV-${{steps.time.outputs.time}}"
                  command = []
                  environment = {
                    APP_KEYS = "$APP_KEYS"
                    API_TOKEN_SALT = "$API_TOKEN_SALT"
                    ADMIN_JWT_SECRET = "$ADMIN_JWT_SECRET"
                    JWT_SECRET = "$JWT_SECRET"
                    DATABASE_USERNAME = "$DATABASE_USERNAME"
                    DATABASE_PASSWORD = "$DATABASE_PASSWORD"
                    AWS_ACCESS_KEY_ID = "$AWS_ACCESS_KEY_ID"
                    AWS_SECRET_ACCESS_KEY = "$AWS_SECRET_ACCESS_KEY"
                    AWS_REGION = "$AWS_REGION"
                    STRAPI_S3_BUCKET = "$STRAPI_S3_BUCKET"
                    PORT = 1338
                    ENV = "$ENV"
                    REPO = "$REPO"
                    BRANCH = "$BRANCH"
                    DATABASE_HOST = "$DATABASE_HOST"
                    GH_APP_ID = "$GH_APP_ID"
                    GH_APP_SECRET_KEY = "$GH_APP_SECRET_KEY"
                    GH_APP_CLIENT_ID = "$GH_APP_CLIENT_ID"
                    GH_APP_CLIENT_SECRET = "$GH_APP_CLIENT_SECRET"
                    GH_APP_INSTALLATION_ID = "$GH_APP_INSTALLATION_ID"
                    GH_STRAPI_WORKFLOW_ID = "$GH_STRAPI_WORKFLOW_ID"
                    DOMAIN = "https://$STRAPI_MANAGER_DOMAIN"
                  }
                  ports = {
                    "1338" = "HTTP"
                    "1339" = "HTTP"
                  }
                  endpoint_port = -1
                  health_check = {
                    healthy_threshold = -1
                    unhealthy_threshold = -1
                    timeout_seconds = -1
                    interval_seconds = -1
                    path  = "/health"
                    success_codes = "200"
                  }
                  is_public = false
                }
              ]
            }
          ]
          EOL
      - name: cache dotenv
        if: ${{ success() }}
        id: dotenv-cache
        uses: actions/cache@v3
        env:
          cache-name: cache-dotenv-back-${{needs.deploy-ready.outputs.stage}}
        with:
          path: ./strapi/.env
          key: ${{ runner.os }}-${{ env.cache-name }}-${{needs.deploy-ready.outputs.stage}}-${{ github.SHA }}
      - name: cache tfvars
        if: ${{ success() }}
        id: tfvars-cache
        uses: actions/cache@v3
        env:
          cache-name: cache-tfvars-back-${{needs.deploy-ready.outputs.stage}}
        with:
          path: ./terraform/vars/${{needs.deploy-ready.outputs.stage}}.tfvars
          key: ${{ runner.os }}-${{ env.cache-name }}-${{needs.deploy-ready.outputs.stage}}-${{ github.SHA }}

  image-prepare:
    name: image preparation start
    runs-on: ubuntu-latest
    needs: [prepare-dotenv, deploy-ready]
    environment: ${{needs.deploy-ready.outputs.stage}}
    if: ${{ (needs.deploy-ready.outputs.strapi-manager == 'true')|| (needs.deploy-ready.outputs.nginx == 'true')|| (needs.deploy-ready.outputs.strapi-superadmin == 'true') }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        if: ${{ success() }}
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        if: ${{ success() }}
        uses: docker/setup-buildx-action@v2
      - name: Configure AWS credentials
        if: ${{ success() }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - name: Login to Amazon ECR
        if: ${{ success() }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: cache dotenv
        if: ${{ success() }}
        id: dotenv-cache
        uses: actions/cache@v3
        env:
          cache-name: cache-dotenv-back-${{needs.deploy-ready.outputs.stage}}
        with:
          path: ./strapi/.env
          key: ${{ runner.os }}-${{ env.cache-name }}-${{needs.deploy-ready.outputs.stage}}-${{ github.SHA }}
      - name: Build the stack
        if: ${{ success() }}
        working-directory: ./strapi
        run: TAG=${{needs.prepare-dotenv.outputs.time}} docker compose build
      - name: Push the stack
        if: ${{ success() }}
        working-directory: ./strapi
        run: TAG=${{needs.prepare-dotenv.outputs.time}} docker compose push
      - name: Build the stack latest
        if: ${{ success() }}
        working-directory: ./strapi
        run: docker compose build
      - name: Push the stack latest
        if: ${{ success() }}
        working-directory: ./strapi
        run: docker compose push ${{needs.deploy-ready.outputs.services}}

  deploy-service:
    name: service deployment
    runs-on: ubuntu-latest
    needs: [image-prepare, deploy-ready]
    environment: ${{needs.deploy-ready.outputs.stage}}
    if: ${{ (needs.deploy-ready.outputs.strapi-superadmin == 'true')|| (needs.deploy-ready.outputs.nginx == 'true') }}
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        if: ${{ success() }}
      - name: Configure AWS Credentials
        if: ${{ success() }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: cache tfvars
        id: tfvars-cache
        if: ${{ success() }}
        uses: actions/cache@v3
        env:
          cache-name: cache-tfvars-back-${{needs.deploy-ready.outputs.stage}}
        with:
          path: ./terraform/vars/${{needs.deploy-ready.outputs.stage}}.tfvars
          key: ${{ runner.os }}-${{ env.cache-name }}-${{needs.deploy-ready.outputs.stage}}-${{ github.SHA }}
      - run: terraform init -backend-config="key=lightsail-server-deploy"
        if: ${{ success() }}
        working-directory: ./terraform/lightsail/deploy
      - run: terraform workspace new ${{needs.deploy-ready.outputs.stage}}
        working-directory: ./terraform/lightsail/deploy
        continue-on-error: true
      - run: terraform workspace select ${{needs.deploy-ready.outputs.stage}}
        working-directory: ./terraform/lightsail/deploy
        continue-on-error: true
      - name: Terraform Plan
        id: plan
        if: ${{ success() }}
        working-directory: ./terraform/lightsail/deploy
        run: terraform plan -no-color -var-file="../../vars/${{needs.deploy-ready.outputs.stage}}.tfvars"
      - name: Terraform Apply
        id: apply
        if: ${{ success() }}
        working-directory: ./terraform/lightsail/deploy
        run: terraform apply -auto-approve -var-file="../../vars/${{needs.deploy-ready.outputs.stage}}.tfvars"

  deploy-end:
    name: deploy end notification
    runs-on: ubuntu-latest
    needs: [deploy-service, deploy-ready]
    steps:
      - uses: actions/checkout@v3
      - name: status save - success
        uses: slackapi/slack-github-action@v1.21.0
        with:
          update-ts: ${{ needs.deploy-ready.outputs.ts }}
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": "CMS 배포가 완료되었습니다",
              "attachments": [
                {
                  "color": "#8fce00",
                  "pretext": "Deployment of <${{github.SERVER_URL}}/${{github.REPOSITORY}}/actions/runs/${{github.RUN_ID}}|${{needs.deploy-ready.outputs.stage}}> stage started by <https://github.com/${{github.ACTOR}}|${{github.ACTOR}}>",
                  "fields": [
                    {
                      "title": "Services",
                      "short": true,
                      "value": "${{needs.deploy-ready.outputs.slack-message}}"
                    },
                    {
                      "title": "Status",
                      "short": true,
                      "value": "Success"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
